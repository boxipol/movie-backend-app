name: Backend CD

on:
  workflow_dispatch:

#  push:
#    branches:
#      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: backend-app
  EKS_CLUSTER_NAME: movie-app-cluster

jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          node-version: 3.12
#
#      - name: Cache pipenv and pip cache
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cache/pip
#            ~/.local/share/virtualenvs
#          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-pipenv-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install pipenv
#          pipenv install --dev
#
#      - name: Run tests with pytest
#        run: |
#          pipenv run pytest
#
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          node-version: 3.12
#
#      - name: Cache pipenv and pip cache
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cache/pip
#            ~/.local/share/virtualenvs
#          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-pipenv-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          pip install flask-cors
#
#      - name: Lint with test app
#        run: |
#          flake8 movies/

  build:
#    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets. AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}
            
          echo "Building image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_URI|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml